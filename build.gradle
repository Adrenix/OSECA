buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = mod_group
archivesBaseName = mod_archive

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

mixin {
    add sourceSets.main, mod_mixin_refmap
}

minecraft {
    mappings channel: mappings_channel, version: mc_version

    runs {
        client {
            workingDirectory project.file('run')
            args run_args

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                oldswing {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                oldswing {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/reousrces/')

            mods {
                oldswing {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'mod_id': mod_id, 'mod_name': mod_name, 'mod_description': mod_description, 'mod_version': mod_version,
                'mc_version': mc_version, 'mod_url': mod_url, 'mod_author': mod_author, 'mod_logo': mod_logo,
                'mod_license_url': mod_license_url, 'mod_issues_url': mod_issues_url
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_group,
                "Specification-Version": mod_version,
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : mod_group,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs": mod_mixin
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}